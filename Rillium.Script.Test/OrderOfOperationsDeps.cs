namespace Rillium.Script.Test
{
    internal static class OrderOfOperationsDeps
    {
        public static readonly Dictionary<string, int> PositiveCases = new()
        {
            {"5 + 3", 5 + 3},
            {"2 * 3", 2 * 3},
            {"2 + 3 * 4", 2 + 3 * 4},
            {"(2 + 3) * 4", (2 + 3) * 4},
            {"7 - 2", 7 - 2},
            {"8 / 4", 8 / 4},
            {"3 * 3", 3 * 3},
            {"7 + 2 * 3", 7 + 2 * 3},
            {"(6 - 2) / 2", (6 - 2) / 2},
            {"8 / (2 + 2)", 8 / (2 + 2)},
            {"9 - 3 * 2", 9 - 3 * 2},
            {"5 * (6 - 2)", 5 * (6 - 2)},
            {"15 / (3 * 2)", 15 / (3 * 2)},
            {"7 - (4 + 1)", 7 - (4 + 1)},
            {"(3 + 4) * (2 + 3)", (3 + 4) * (2 + 3)},
            {"3 + 4 * 2 + 3", 3 + 4 * 2 + 3},
            {"6 - (2 + 3) + 3", 6 - (2 + 3) + 3},
            {"2 * (3 + 4) - 2", 2 * (3 + 4) - 2},
            {"(4 + 3) * 2 - 3", (4 + 3) * 2 - 3},
            {"(8 - 2) * (2 + 1)", (8 - 2) * (2 + 1)},
            {"5 - (2 * 2) + 6 / 3", 5 - (2 * 2) + 6 / 3},
            {"5 - 2 * 2 + 6 / 3", 5 - 2 * 2 + 6 / 3},
            {"(1) + (2) * (3)", (1) + (2) * (3)},
            {"((1) + (2) * (3))", ((1) + (2) * (3))},
            {"((1) + (2) * 3)", ((1) + (2) * 3)}
        };


        public static readonly Dictionary<string, int> NegativeCases = new()
        {
            {"-5 + 3", -5 + 3},
            {"-2 * 3", -2 * 3},
            {"-2 + -3 * 4", -2 + -3 * 4},
            {"(-2 + -3) * 4", (-2 + -3) * 4},
            {"-7 - 2", -7 - 2},
            {"-8 / -4", -8 / -4},
            {"-3 * -3", -3 * -3},
            {"-7 + -2 * -3", -7 + -2 * -3},
            {"(-6 - -2) / 2", (-6 - -2) / 2},
            {"-8 / (-2 + -2)", -8 / (-2 + -2)},
            {"-9 - -3 * -2", -9 - -3 * -2},
            {"-5 * (-6 - -2)", -5 * (-6 - -2)},
            {"-15 / (-3 * -2)", -15 / (-3 * -2)},
            {"-7 - (-4 + 1)", -7 - (-4 + 1)},
            {"(-3 + -4) * (-2 + -3)", (-3 + -4) * (-2 + -3)},
            {"-6 - (-2 + -3) + 3", -6 - (-2 + -3) + 3},
            {"-2 * (-3 + -4) - 2", -2 * (-3 + -4) - 2},
            {"(-4 + -3) * 2 - -3", (-4 + -3) * 2 - -3},
            {"(-8 - -2) * (2 + 1)", (-8 - -2) * (2 + 1)},
            {"-5 - (-2 * -2) + 6 / 3", -5 - (-2 * -2) + 6 / 3},
            {"-5 - -2 * -2 + 6 / 3", -5 - -2 * -2 + 6 / 3},
            {"(-1) + (-2) * (-3)", (-1) + (-2) * (-3)},
            {"((-1) + (-2) * (-3))", ((-1) + (-2) * (-3))},
            {"((-1) + (-2) * -3)", ((-1) + (-2) * -3)}
        };
    }
}
